{"version":3,"file":"static/webpack/static/development/pages/index.js.9eb949beea980d15f2f0.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Head from 'next/head'\nimport React, { useRef, useEffect, useState } from 'react'\nimport { medCut } from '../utils'\nimport * as _ from 'lodash'\n\n// super pixel\nlet sp = 16\n\nfunction fill(rgb) {\n  return 'rgb(' + rgb.join(',') + ')'\n}\n\nlet Line = () => <div style={{ height: sp, width: '100%' }} />\n\nlet Space = () => <div style={{ width: sp / 2 }} />\n\nlet Button = ({\n  label,\n  clearer,\n  trigger,\n  text_label,\n  press_gates,\n  custom_style,\n}) => {\n  let button_style = {\n    fontFamily: 'inherit',\n    fontSize: 'inherit',\n    lineHeight: 'inherit',\n    border: 'none',\n    padding: 0,\n    margin: 0,\n    width: sp,\n    background: 'black',\n    color: 'white',\n    display: 'block',\n    userSelect: 'none',\n  }\n  if (custom_style !== undefined) {\n    button_style = Object.assign(button_style, custom_style)\n  }\n  return (\n    <div style={{ display: 'flex' }}>\n      <button\n        style={button_style}\n        onMouseDown={e => {\n          trigger()\n        }}\n      >\n        {label}\n      </button>\n      {text_label !== undefined ? (\n        <div\n          style={{ display: 'flex', cursor: 'default', userSelect: 'none' }}\n          onMouseDown={e => {\n            trigger()\n          }}\n        >\n          <Space />\n          <div>{text_label}</div>\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nlet RepeatButton = ({\n  label,\n  clearer,\n  trigger,\n  text_label,\n  press_gates,\n  custom_style,\n}) => {\n  let repeat_ref = useRef(null)\n  let start_gate = useRef(false)\n\n  let touch_mode = useRef(false)\n\n  let button_style = {\n    fontFamily: 'inherit',\n    fontSize: 'inherit',\n    lineHeight: 'inherit',\n    border: 'none',\n    padding: 0,\n    margin: 0,\n    width: sp,\n    background: 'black',\n    color: 'white',\n    display: 'block',\n    userSelect: 'none',\n  }\n  if (custom_style !== undefined) {\n    button_style = Object.assign(button_style, custom_style)\n  }\n  return (\n    <div style={{ display: 'flex' }}>\n      <button\n        style={button_style}\n        onTouchStart={e => {\n          touch_mode.current = true\n          press_gates.current = true\n          trigger()\n          setTimeout(() => {\n            if (press_gates.current) {\n              repeat_ref.current = setInterval(() => {\n                trigger()\n              }, 100)\n              clearer(repeat_ref.current)\n            }\n          }, 400)\n        }}\n        onTouchEnd={e => {\n          setTimeout(() => {\n            touch_mode.current = false\n          }, 400)\n          e.preventDefault()\n        }}\n        onMouseDown={e => {\n          if (!touch_mode.current) {\n            press_gates.current = true\n            trigger()\n            setTimeout(() => {\n              if (press_gates.current) {\n                repeat_ref.current = setInterval(() => {\n                  trigger()\n                }, 100)\n                clearer(repeat_ref.current)\n              }\n            }, 400)\n          }\n        }}\n        onMouseUp={e => {\n          if (!touch_mode.current) {\n            clearInterval(repeat_ref.current)\n          }\n        }}\n      >\n        {label}\n      </button>\n      {text_label !== undefined ? (\n        <div\n          style={{ display: 'flex', cursor: 'default', userSelect: 'none' }}\n          onMouseDown={e => {\n            repeat_ref.current = setInterval(() => {\n              trigger()\n            }, 200)\n            clearer(repeat_ref.current)\n            trigger()\n          }}\n          onMouseUp={e => {\n            clearInterval(repeat_ref.current)\n          }}\n        >\n          <Space />\n          <div>{text_label}</div>\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nlet Home = () => {\n  let [width, setWidth] = useState(null)\n  let [favicon, setFavicon] = useState('favicon.png')\n\n  let cref = useRef(null)\n  let rref = useRef(null)\n  let pref = useRef(null)\n  let rpref = useRef(null)\n  let qref = useRef(null)\n\n  let press_gates = useRef(false)\n\n  let dim_ref = useRef(null)\n  let reduced_ref = useRef(null)\n\n  let km_ref = useRef({})\n  let state_ref = useRef({\n    img: null,\n    tiles: null,\n  })\n\n  let slider_click_ref = useRef(null)\n  let slider_touch_mode = useRef(false)\n\n  let ti_ref = useRef(null)\n\n  let thresh_ref = useRef(null)\n\n  let clear_ref = useRef([])\n\n  function loadImage(src) {\n    let c = cref.current\n    let cx = c.getContext('2d')\n    let r = rref.current\n    let rx = r.getContext('2d')\n    let p = pref.current\n    let px = p.getContext('2d')\n    let rp = rpref.current\n    let rpx = rp.getContext('2d')\n\n    let img = document.createElement('img')\n    img.onload = () => {\n      let adj_width = Math.min(img.width, window.innerWidth - sp * 2)\n      let dsp = sp\n      let snapw = Math.round(adj_width / dsp) * dsp\n      let snapr = snapw / img.width\n      let snaph = Math.round((img.height * snapr) / dsp) * dsp\n\n      img.width = snapw\n      img.height = snaph\n\n      setWidth(img.width)\n\n      c.width = img.width\n      c.height = img.height\n\n      let cols = img.width / sp\n      let rows = img.height / sp\n      let cells = cols * rows\n\n      // preserve dimensions\n      let t_img = document.createElement('canvas')\n      t_img.width = c.width\n      t_img.height = c.height\n      let t_imgx = t_img.getContext('2d')\n      t_imgx.drawImage(img, 0, 0, c.width, c.height)\n      img = t_img\n\n      cx.drawImage(img, 0, 0, c.width, c.height)\n\n      r.width = cols\n      r.height = rows\n\n      rx.drawImage(img, 0, 0, c.width, c.height, 0, 0, r.width, r.height)\n\n      p.width = sp * 8\n      p.height = sp\n\n      rp.width = img.width\n      rp.height = img.height\n\n      // get colors from reduced image\n      let image_data = rx.getImageData(0, 0, r.width, r.height)\n      let colors = []\n      for (let i = 0; i < image_data.data.length; i += 4) {\n        let rgb = [0, 1, 2].map(offset => image_data.data[i + offset])\n        colors.push(rgb)\n      }\n\n      // get palette draw palette\n      let palette = medCut(colors)\n      // palette = palette.map(color => color.map(channel => 255 - channel))\n      for (let i = 0; i < palette.length; i++) {\n        px.fillStyle = fill(palette[i])\n        px.fillRect(i * sp, 0, sp, sp)\n      }\n\n      // draw palette image\n      for (let i = 0; i < image_data.data.length; i += 4) {\n        let rgb = [0, 1, 2].map(offset => image_data.data[i + offset])\n        let distances = palette.map(prgb => {\n          let [r1, g1, b1] = rgb\n          let [r2, g2, b2] = prgb\n          // return Math.abs(\n          //   ((r2 - r1) * 1) ^ (2 + (g2 - g1) * 1) ^ (2 + (b2 - b1) * 1) ^ 2\n          // )\n          // weighted match\n          return Math.abs(\n            ((r2 - r1) * 0.3) ^\n              (2 + (g2 - g1) * 0.59) ^\n              (2 + (b2 - b1) * 0.11) ^\n              2\n          )\n        })\n        let min = Math.min(...distances)\n        let min_index = distances.indexOf(min)\n        let color = palette[min_index]\n        let p = i / 4\n        let x = p % cols\n        let y = Math.floor(p / cols)\n        rpx.fillStyle = fill(color)\n        rpx.fillRect(x * sp, y * sp, sp, sp)\n      }\n\n      // cut up original image\n      let tiles = []\n      for (let i = 0; i < cells; i++) {\n        let t = document.createElement('canvas')\n        t.width = sp\n        t.height = sp\n        let tx = t.getContext('2d')\n\n        let x = i % cols\n        let y = Math.floor(i / cols)\n\n        tx.drawImage(c, x * sp, y * sp, sp, sp, 0, 0, sp, sp)\n\n        let complexity = t.toDataURL().length / (sp * sp)\n\n        tiles.push({ t, c: complexity, x, y, i })\n      }\n\n      tiles = _.sortBy(tiles, 'c').reverse()\n\n      let q = qref.current\n      q.innerHTML = ''\n      for (let i = 0; i < tiles.length; i++) {\n        let bigger = document.createElement('canvas')\n        bigger.width = sp * 2\n        bigger.height = sp * 2\n        let bx = bigger.getContext('2d')\n        bx.imageSmoothingEnable = false\n        let tile = tiles[i]\n        bx.drawImage(tile.t, 0, 0, bigger.width, bigger.height)\n        let d = document.createElement('div')\n        // d.style.display = 'flex'\n        // d.style.alignItems = 'center'\n        let text = document.createElement('div')\n        // text.style.marginLeft = sp / 2 + 'px'\n        text.innerHTML = `${tile.c.toFixed(3)}`\n        d.appendChild(bigger)\n        d.appendChild(text)\n        q.appendChild(d)\n      }\n\n      let state = state_ref.current\n      state.img = img\n      state.tiles = tiles\n      state.cells = cells\n      state.cols = cols\n      state.rows = rows\n\n      let ti = ti_ref.current\n      ti.width = img.width - sp * 4\n      ti.height = sp * 2\n\n      // favicon\n      let f = document.createElement('canvas')\n      f.width = 32\n      f.height = 32\n      let fx = f.getContext('2d')\n      let t = document.createElement('canvas')\n      t.width = 8\n      t.height = 8\n      let tx = t.getContext('2d')\n      tx.drawImage(img, 0, 0, img.width, img.height, 0, 0, 8, 8)\n      let favicon_data = tx.getImageData(0, 0, t.width, t.height)\n      for (let i = 0; i < favicon_data.data.length; i += 4) {\n        let rgb = [0, 1, 2].map(offset => favicon_data.data[i + offset])\n        let distances = palette.map(prgb => {\n          let [r1, g1, b1] = rgb\n          let [r2, g2, b2] = prgb\n          return Math.abs(\n            ((r2 - r1) * 0.3) ^\n              (2 + (g2 - g1) * 0.59) ^\n              (2 + (b2 - b1) * 0.11) ^\n              2\n          )\n        })\n        let min = Math.min(...distances)\n        let min_index = distances.indexOf(min)\n        let color = palette[min_index]\n        let p = i / 4\n        let x = p % 8\n        let y = Math.floor(p / 8)\n        fx.fillStyle = fill(color)\n        fx.fillRect(x * 4, y * 4, 4, 4)\n      }\n      setFavicon(f.toDataURL())\n\n      state.threshold = 120\n\n      render()\n    }\n\n    img.src = src\n  }\n\n  useEffect(() => {\n    // img.src = 'uncut.jpg'\n    // img.src = 'exmachina.jpeg'\n    // img.src = 'mrrobot.jpg'\n    // img.src = 'stalker.jpg'\n    // img.src = 'acronym.jpg'\n    // img.src = 'mrrobot2.jpg'\n    // img.src = 'veilance.jpg'\n    // img.src = 'mccabe.jpg'\n    // img.src = 'compute.png'\n    loadImage('mrrobot2.jpg')\n  }, [])\n\n  function clickSetThreshold(x) {\n    let rect = ti_ref.current.getBoundingClientRect()\n    x = x - rect.left\n    let percent = x / ti_ref.current.width\n    let { cells, threshold } = state_ref.current\n    let new_thresh =\n      cells - Math.min(cells, Math.max(0, Math.round(percent * cells)))\n    state_ref.current.threshold = new_thresh\n    render()\n  }\n\n  function render() {\n    let cx = cref.current.getContext('2d')\n    let rp = rpref.current\n\n    let { img, tiles, cols, rows, cells, threshold } = state_ref.current\n    cx.drawImage(img, 0, 0, img.width, img.height)\n\n    for (let i = threshold; i < cells; i++) {\n      let tile = tiles[i]\n      let x = tile.x\n      let y = tile.y\n      cx.drawImage(rp, x * sp, y * sp, sp, sp, x * sp, y * sp, sp, sp)\n    }\n\n    thresh_ref.current.innerHTML = cells - threshold + '/' + cells\n\n    let ti = ti_ref.current\n    let tix = ti.getContext('2d')\n\n    tix.fillStyle = '#ddd'\n    tix.fillRect(0, 0, ti.width, sp * 2)\n\n    tix.fillStyle = '#999'\n    let tmark = Math.min(\n      Math.max(1, Math.round(ti.width * ((cells - threshold) / cells))),\n      ti.width - 2\n    )\n    tix.fillRect(tmark - 1, 0, 3, sp * 2)\n\n    let q = qref.current\n    let nodes = q.childNodes\n    for (let i = 0; i < nodes.length; i++) {\n      let node = nodes[i]\n      nodes[i].className = ''\n      if (i < threshold) {\n        nodes[i].className = 'threshold_marker'\n      } else {\n        nodes[i].className = ''\n      }\n    }\n\n    dim_ref.current.innerHTML = img.width + 'x' + img.height\n    reduced_ref.current.innerHTML =\n      '(' +\n      img.width +\n      '/' +\n      sp +\n      ')x(' +\n      img.height +\n      '/' +\n      sp +\n      ')=' +\n      cols +\n      'x' +\n      rows\n  }\n\n  function trigger(key) {\n    keyAction(key, null)\n  }\n\n  function keyAction(key, event) {\n    let km = km_ref.current\n\n    if (key === 'o') {\n      let input = document.createElement('input')\n      input.setAttribute('type', 'file')\n      input.dispatchEvent(\n        new MouseEvent('click', {\n          bubbles: true,\n          cancelable: true,\n          view: window,\n        })\n      )\n      function handleChange(e) {\n        for (let item of this.files) {\n          if (item.type.indexOf('image') < 0) {\n            continue\n          }\n          let src = URL.createObjectURL(item)\n          loadImage(src)\n        }\n        this.removeEventListener('change', handleChange)\n      }\n      input.addEventListener('change', handleChange)\n    } else if (key === 'p') {\n      let link = document.createElement('a')\n\n      cref.current.toBlob(function(blob) {\n        link.setAttribute(\n          'download',\n          'res-' +\n            new Date()\n              .toISOString()\n              .slice(0, -4)\n              .replace(/-/g, '')\n              .replace(/:/g, '')\n              .replace(/_/g, '')\n              .replace(/\\./g, '') +\n            'Z' +\n            '.png'\n        )\n\n        link.setAttribute('href', URL.createObjectURL(blob))\n        link.dispatchEvent(\n          new MouseEvent(`click`, {\n            bubbles: true,\n            cancelable: true,\n            view: window,\n          })\n        )\n      })\n    }\n\n    if (key === 'l') {\n      state_ref.current.threshold = Math.max(\n        0,\n        state_ref.current.threshold - 10\n      )\n      render()\n    } else if (key === 'h') {\n      state_ref.current.threshold = Math.min(\n        state_ref.current.cells,\n        state_ref.current.threshold + 10\n      )\n      render()\n    } else if (key === 'L') {\n      state_ref.current.threshold = Math.max(0, state_ref.current.threshold - 1)\n      render()\n    } else if (key === 'H') {\n      state_ref.current.threshold = Math.min(\n        state_ref.current.cells,\n        state_ref.current.threshold + 1\n      )\n      render()\n    }\n  }\n\n  function downHandler(e) {\n    km_ref.current[e.key] = true\n    keyAction(e.key, e)\n  }\n\n  function upHandler(e) {\n    km_ref.current[e.key] = false\n  }\n\n  function handleMouseMove(e) {\n    if (slider_click_ref.current) {\n      clickSetThreshold(e.clientX)\n    }\n  }\n\n  function clearer(id) {\n    clear_ref.current.push(id)\n  }\n\n  function clearRepeatIntervals() {\n    for (let i = 0; i < clear_ref.current.length; i++) {\n      let item = clear_ref.current[i]\n      clearInterval(item)\n    }\n    clear_ref.current = []\n  }\n\n  function clearPressGates() {\n    press_gates.current = false\n  }\n\n  function handleMouseUp(e) {\n    if (slider_click_ref.current) {\n      if (slider_click_ref.current) {\n        slider_click_ref.current = false\n        clickSetThreshold(e.clientX)\n      }\n    }\n    clearRepeatIntervals()\n  }\n\n  function onDrop(e) {\n    e.preventDefault()\n    e.stopPropagation()\n    let file = e.dataTransfer.files[0]\n    let filename = file.path ? file.path : file.name ? file.name : ''\n    let src = URL.createObjectURL(file)\n    loadImage(src)\n  }\n\n  function onDrag(e) {\n    e.stopPropagation()\n    e.preventDefault()\n    e.dataTransfer.dropEffect = 'copy'\n  }\n\n  function onPaste(e) {\n    e.preventDefault()\n    e.stopPropagation()\n    for (const item of e.clipboardData.items) {\n      if (item.type.indexOf('image') < 0) {\n        continue\n      }\n      let file = item.getAsFile()\n      let src = URL.createObjectURL(file)\n      loadImage(src)\n    }\n  }\n\n  function handleTouchEnd(e) {\n    clearPressGates()\n    clearRepeatIntervals()\n  }\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler)\n    window.addEventListener('keyup', upHandler)\n    window.addEventListener('mousemove', handleMouseMove)\n    window.addEventListener('mouseup', handleMouseUp)\n    window.addEventListener('paste', onPaste, false)\n    window.addEventListener('dragover', onDrag, false)\n    window.addEventListener('drop', onDrop, false)\n    window.addEventListener('touchend', handleTouchEnd, false)\n    return () => {\n      window.removeEventListener('keydown', downHandler)\n      window.removeEventListener('keyup', upHandler)\n      window.removeEventListener('mousemove', handleMouseMove)\n      window.removeEventListener('mouseup', handleMouseUp)\n      window.removeEventListener('paste', onPaste, false)\n      window.removeEventListener('dragover', onDrag, false)\n      window.removeEventListener('drop', onDrop, false)\n      window.removeEventListener('touchend', handleTouchEnd, false)\n    }\n  }, [])\n\n  return (\n    <div>\n      <Head>\n        <title>Res</title>\n        <link\n          id=\"favicon_link\"\n          rel=\"shortcut icon\"\n          type=\"image/png\"\n          href={favicon}\n        />\n      </Head>\n\n      <div\n        style={{\n          display: width !== null ? 'block' : 'none',\n          width: width !== null ? width + sp * 2 : 'auto',\n          marginLeft: 'auto',\n          marginRight: 'auto',\n        }}\n      >\n        <div style={{ paddingLeft: sp, paddingRight: sp }}>\n          <Line />\n          <div style={{ display: 'flex' }}>\n            <Button\n              label=\"o\"\n              press_gates={press_gates}\n              text_label=\"Load image (or paste or drop)\"\n              clearer={clearer}\n              trigger={() => {\n                trigger('o')\n              }}\n            />\n            <Space />\n            <Button\n              label=\"p\"\n              press_gates={press_gates}\n              text_label=\"Save result as png\"\n              clearer={clearer}\n              trigger={() => {\n                trigger('p')\n              }}\n            />\n          </div>\n\n          <Line />\n          <canvas ref={cref} />\n          <Line />\n          <div\n            style={{\n              display: 'flex',\n              textAlign: 'center',\n              width: '100%',\n              position: 'relative',\n            }}\n          >\n            <canvas\n              height={sp * 23}\n              ref={ti_ref}\n              style={{\n                position: 'absolute',\n                height: sp * 2,\n                left: sp * 2,\n                top: 0,\n                cursor: 'crosshair',\n                userSelect: 'none',\n              }}\n              onTouchStart={e => {\n                slider_click_ref.current = true\n                slider_touch_mode.current = true\n                clickSetThreshold(e.changedTouches[0].clientX)\n              }}\n              onTouchEnd={e => {\n                setTimeout(() => {\n                  slider_click_ref.current = false\n                  slider_touch_mode.current = false\n                }, 400)\n              }}\n              onMouseDown={e => {\n                if (!slider_touch_mode) {\n                  slider_click_ref.current = true\n                  clickSetThreshold(e.clientX)\n                }\n              }}\n            />\n            <RepeatButton\n              label=\"h\"\n              press_gates={press_gates}\n              custom_style={{ height: sp * 2, width: sp * 2 }}\n              clearer={clearer}\n              trigger={() => {\n                trigger('h')\n              }}\n            />\n            <div\n              ref={thresh_ref}\n              style={{\n                flexGrow: 1,\n                position: 'relative',\n                pointerEvents: 'none',\n                lineHeight: sp * 2 + 'px',\n              }}\n            ></div>\n            <RepeatButton\n              label=\"l\"\n              press_gates={press_gates}\n              custom_style={{ height: sp * 2, width: sp * 2 }}\n              clearer={clearer}\n              trigger={() => {\n                trigger('l')\n              }}\n            />\n          </div>\n        </div>\n        <Line />\n        <Line />\n        <div\n          style={{ paddingLeft: sp, paddingRight: sp, background: '#efefef' }}\n        >\n          <Line />\n          <div>How it works</div>\n          <Line />\n          <div>\n            Adjusted image size: <span ref={dim_ref}></span>\n          </div>\n          <div>\n            Superpixel: {sp}x{sp}\n          </div>\n          <Line />\n          <div>Reduced image</div>\n          <canvas ref={rref} />\n          <div ref={reduced_ref}></div>\n          <Line />\n          <div>8-color palette from reduced image</div>\n          <canvas ref={pref} />\n          <div>\n            Using the median cut approach{' '}\n            <a\n              href=\"https://spin.atomicobject.com/2016/12/07/pixels-and-palettes-extracting-color-palettes-from-images/\"\n              target=\"_blank\"\n            >\n              explained here\n            </a>\n          </div>\n          <Line />\n          <div>8-color palette applied to reduced image at original size</div>\n          <canvas ref={rpref} />\n          <Line />\n          <div>\n            Superpixels from original image sorted by complexity (data URL\n            string length / number of pixels) shown here at 2x\n          </div>\n          <div\n            ref={qref}\n            style={{\n              display: 'grid',\n              gridTemplateColumns:\n                'repeat( auto-fit, minmax(' + sp * 2 + 'px, 1fr) )',\n              gridColumnGap: sp / 2,\n              gridRowGap: sp / 4,\n              textAlign: 'center',\n              // maxHeight: sp * 21,\n              overflowY: 'auto',\n              fontSize: 9,\n              lineHeight: '12px',\n            }}\n          />\n          <div>\n            Idea for using compression as a proxy for complexity{' '}\n            <a\n              target=\"_blank\"\n              href=\"https://stackoverflow.com/questions/45579557/how-to-compare-images-and-determine-which-has-more-content/45579688#45579688\"\n            >\n              from this suggestion by Arthur-1 on StackOverflow\n            </a>\n          </div>\n          <Line />\n        </div>\n        <Line />\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            paddingLeft: sp,\n            paddingRight: sp,\n          }}\n        >\n          <div>\n            <a href=\"https://constraint.systems\">constraint.systems</a>\n          </div>\n          <div>\n            <a href=\"#\">View source</a>\n          </div>\n        </div>\n        <Line />\n      </div>\n\n      <style jsx global>{`\n        @font-face {\n          font-family: 'custom';\n          src: url('/fonts/IBMPlexMono-Regular.woff2') format('woff2'),\n            url('/fonts/IBMPlexMono-Regular.woff') format('woff');\n        }\n        @font-face {\n          font-family: 'custom';\n          src: url('/fonts/IBMPlexMono-Italic.woff2') format('woff2'),\n            url('/fonts/IBMPlexMono-Italic.woff') format('woff');\n          font-style: italic;\n        }\n        html,\n        body {\n          padding: 0;\n          margin: 0;\n          font-family: 'custom', monospace;\n          font-size: 12px;\n          line-height: 16px;\n        }\n        * {\n          box-sizing: border-box;\n        }\n        canvas {\n          display: block;\n        }\n        a {\n          color: inherit;\n        }\n        .threshold_marker div {\n          background: #bbb;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nexport default Home\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAYA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAYA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6CA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AA3CA;AA4CA;AAAA;AAAA;AACA;AA7CA;AACA;AA0CA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxDA;AA0DA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhFA;AACA;AAwDA;AAAA;AAwBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlJA;AAmJA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArKA;AACA;AAiJA;AAAA;AAoBA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAUA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAnBA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAgBA;AACA;AACA;AAEA;AACA;AAcA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA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","sourceRoot":""}